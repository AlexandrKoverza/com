$maxWidth: 1920;
// $maxWidthContainer: 1170;

// Adaptive fon-size
// @mixin adaptiveFont($pcSize, $mobSize) {
//   $addSize: $pcSize - $mobSize;
//   $maxWidth: $maxWidth - 320;
//   font-size: calc(
//     #{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth})
//   );
// }

@mixin adaptiveFont($pcSize, $mobSize) {
  $addSize: $pcSize - $mobSize;
  $maxWidth: $maxWidth - 320;

  @if $maxWidth==1920 {
    font-size: $pcSize
  } @else {
    font-size: calc(
      #{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth})
    );
  }

}

// Adaptive property
@mixin adaptiveValue($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type==1 {
    // < container
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - 320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if $type==2 {
    // > container
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    // always
    #{$property}: calc(
      #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}

// Background
@mixin backgroundBg($img, $repeat, $attachment, $size, $position) {
  background: url("@img/#{$img}"); // string
  background-repeat: $repeat; // repeat, no-repeat, repeat-x, repeat-y, space, round
  background-attachment: $attachment; // scroll, fixed, local
  background-size: $size; // contain, cover, auto, 100% auto, auto 100% etc
  background-position: $position; // 0 0, 50% 50%, 100% 100% etc
}
